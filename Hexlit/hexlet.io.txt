const squareOfSum = (a, b) => (a + b) * (a + b) ;

const x = 5;
const y = 8;

console.log(squareOfSum(x, y));

const finalGrade = (exam, projects) => {
  if (exam > 90 && projects > 10) {
    return 100;
  } else if (exam > 75 && projects > 5) {
    return 90;
  } else if (exam > 50 && projects > 2) {
    return 75;
  } else {
    return 0;
  }
};


const finalGrade = (exam, projects) => {
  if (exam > 90 || projects > 10) {
    return 100;
  } else if (exam > 75 && projects >= 5) {
    return 90;
	  } else if (exam > 50 && projects >= 2) {
    return 75;
  } else {
    return 0;
  }
};


  if (begin === 0 || end === 0) {
    return 0;
  }
  else if (begin > end) {
    return NaN;
  }
  else if (begin === end) {
    return end;
  }
  return begin + sequenceSum(begin + 1, end);
  
     if(begin == 0 && end == 0){
        return 0;
    }else if(begin == end){
        return begin;
    }else if(begin > end){
        return NaN;
    }    
    return begin + sequenceSum(begin + 1, end);    
	
	
	
let divisor = 2;
if(num < 1) 
{
return NaN;
}
if(num === 1) 
{
return num;
}
while (num % divisor) 
{
divisor++;
}
return divisor;
};

const smallestDivisor = (num) => {
if (num % 2 === 0 && num > 0) {
return 2;
} else if (num <= 0) {
return NaN;
} else if (num === 1) {
return num;
}
const devisor = (count = 2) => {
if (num % count !== 0) { 
      return devisor(count + 1);
    } else {
      return count;
    }
  }
  return devisor();
}




const isPrime = num => {
    for(let i = 2, s = Math.sqrt(num); i <= s; i++)
        if(num % i === 0) return false; 
    return num > 1;
}


assert.equal(factorial(1), 1);
assert.equal(factorial(2), 2);
assert.equal(factorial(3), 6);
assert.equal(factorial(4), 24);
assert.equal(factorial(5), 120);



export const getTriangleArea = (h, b) => { 
return 1 / 2 * h * b; }
  
import { getTriangleArea } from './myMathModule.js'; 
export default (n) => getTriangleArea(n, square(n) / 2);


const square = (a) => a **2;
const sumOfSquares = (a, b) => square(a) + square(b);
const squareSumOfSquares = (a, b) =>  square(sumOfSquares(a, b));



  let result = 0;
  for (let i = 0; i < length(str); i++) {
    let char = str[i];
    if (toUpperCase(char) === char||" " === char) {
      result ++;
    }
  }
  return result;
  
   if (firstCount > secondCount) {
    return 1;
  } else if (firstCount < secondCount) {
    return -1;
  }
  return 0;
  
  
  
  const sum = (str) => {
  let result = 0;
  for(let i = 0; i < length(str); i++) {
    result += Number(str[i]);
  }
  return result;
}
const addDigits = (num) => {
  let result = num;
  while(result >= 10) {
    result = sum(String(result));
  }
  return result;
}
export default addDigits;



function uc(str) {
  var pieces = str.split(" ");
  for (var i = 0; i < pieces.length; i++) {
    var j = pieces[i].charAt(0).toUpperCase();
    pieces[i] = j + pieces[i].substr(1);
  }
  return pieces.join(" ");
}
export default uc;
